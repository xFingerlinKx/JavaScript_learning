Строгий режим
########################################################################################################################

В JavaScript можно включить "строгий режим" - для этого нужно поставить в начало файла или тела функции строку "use strict".

Обычно, если вы забыли поставить let перед привязкой, JavaScript тихо создает глобальную привязку и использует ее.
В строгом режиме вместо этого появляется сообщение об ошибке. Что очень полезно.

Другое отличие строгого режима заключается в том, что в функциях, которые не вызываются как методы, привязка
this содержит значение undefined. При выполнении такого вызова вне строгого режима this относится к объекту глобальной
области видимости - объекту, свойства которого являются глобальными привязками. Поэтому, если вы случайно неправильно
вызовете метод или конструктор в строгом режиме, JavaScript будет выдавать ошибку, как только попытается прочитать
что-нибудь из this, вместо того чтобы спокойно записывать данные в объект из глобальной области видимости.

В качестве примера рассмотрим следующий код, который вызывает функцию конструктора без ключевого слова new, чтобы его
привязка this не ссылалась на вновь созданный объект:
function Person(name) { this.name = name; }
let ferdinand = Person("Ferdinand"); // oops
console.log(name);
// → Ferdinand

Таким образом, фиктивный вызов Person завершился успешно, но вернул неопределенное значение и создал глобальную привязку
name. В строгом режиме результат будет другим.
"use strict";
function Person(name) { this.name = name; }
let ferdinand = Person("Ferdinand"); // forgot new
// → TypeError: Cannot set property 'name' of undefined

К счастью, конструкторы, созданные с помощью нотации class, всегда будут сообщать об ошибке, если вызывать их без new,
что уменьшает количество проблем даже в нестрогом режиме.
У строгого режима есть еще несколько особенностей. В нем запрещено передавать функции нескольких параметров с
одинаковыми именами и полностью исключены некоторые проблемные языковые функции (такие, как утверждение with, настолько
неверное, что не обсуждается в этой книге).

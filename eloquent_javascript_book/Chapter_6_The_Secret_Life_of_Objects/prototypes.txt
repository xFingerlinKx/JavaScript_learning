Прототипы
########################################################################################################################

Кроме набора свойств, у большинства объектов также есть прототип.
Прототип - это другой объект, используемый в качестве запасного источника свойств. Когда объект получает запрос на
свойство, которого у него нет, будет выполняться поиск такого свойства в его прототипе, затем в прототипе прототипа и т. д.

let empty = {};
console.log(empty.toString);
// → function toString(){…}
console.log(empty.toString());
// → [object Object]

А что является прототипом данного пустого объекта? Это великий предок всех прототипов, сущность,
от которой происходят почти все объекты, - Object. prototype.

* Object.getPrototypeOf - возвращает прототип объекта.

Взаимосвязи между прототипами объектов в JavaScript образуют древовидную структуру, и корнем этого дерева является
Object.prototype. Данный объект предоставляет несколько методов, присущих всем объектам, таких как метод toString,
который преобразует объект в строковое представление.

Для многих объектов прототипом - Object.prototype не выступает непосредственным вместо этого существует другой объект,
который предоставляет по умолчанию другой набор свойств. Функции наследуются от Function.prototype, а массивы - от
Array.prototype.

console.log(Object.getPrototypeOf(Math.max) == Function.prototype);
// → true
console.log(Object.getPrototypeOf([]) == Array.prototype);
// → true

Для создания объекта с конкретным прототипом можно использовать Object.create.

let protoRabbit = {
  speak(line) {
    console.log(`The ${this.type} rabbit says '${line}'`);
  }
};
let killerRabbit = Object.create(protoRabbit);
killerRabbit.type = "killer";
killerRabbit.speak("SKREEEE!");
// → The killer rabbit says 'SKREEEE!'

Свойство типа speak(line) в выражении объекта является кратким способом определения метода. Оно создает свойство,
называемое speak, и дает ему функцию в качестве значения. Кролик "прото" действует как контейнер для свойств,
которые являются общими для всех кроликов. Отдельный кролик-объект, как и кролик-убийца, содержит свойства,
которые применяются только к нему самому - в данном случае его тип - и получает общие свойства из своего прототипа.

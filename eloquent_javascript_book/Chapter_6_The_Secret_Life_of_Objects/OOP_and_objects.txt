Тайная жизнь объектов
########################################################################################################################

Инкапсуляция
Основная идея объектно-ориентированного программирования состоит в том, чтобы разделить программу на более мелкие части
и сделать так, чтобы каждая из них отвечала за управление своим состоянием.

Таким образом, некоторые знания о том, как работает данная часть программы, могут храниться в ней локально.
Те, кто работает над остальной частью программы, не должны помнить или даже иметь представление об этих знаниях.
Всякий раз, когда локальные детали изменяются, должен обновляться только код, непосредственно имеющий к ним отношение.
Части такой программы взаимодействуют между собой посредством интерфейсов - ограниченных наборов функций - или привязок,
которые предоставляют полезную функциональность на более абстрактном уровне, скрывая подробности реализации.
Такие части программы моделируются с использованием объектов. Их интерфейс представляет собой определенный набор методов
и свойств. Свойства, являющиеся частью интерфейса, называются общедоступными. Другие, которые не должны быть доступны
для внешнего кода, называются закрытыми. Имена закрытых свойств принято начинать с символа подчеркивания (_),
чтобы отличать их от общедоступных.
Отделение интерфейса от реализации - отличная идея. Обычно это называется инкапсуляцией.

Методы
Обычно метод должен что-то делать с объектом, для которого он был вызван. Когда функция вызывается как метод,
она выглядит как свойство object.method(): в ее теле существует привязка, this, автоматически указывающая на объект,
для которого была и вызывается сразу, как в называемая вызвана функция.

let rabbit = {};
rabbit.speak = function(line) {
  console.log(`The rabbit says '${line}'`);
};

rabbit.speak("I'm alive.");
// → The rabbit says 'I'm alive.'

Поскольку у каждой функции есть своя привязка this, значение которой зависит от способа ее вызова,
вы не можете ссылаться на this в области видимости обычной функции, определенной с помощью ключевого слова function.
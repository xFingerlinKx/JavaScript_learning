Полиморфизм
########################################################################################################################

Когда вы вызываете функцию String (которая преобразует значение в строку) для объекта, он вызывает метод toString для
этого объекта, чтобы попытаться сформировать из него осмысленную строку. Я упомянул, что в отдельных стандартных прототипах
определена собственная версия toString, поэтому они позволяют создать строку, которая содержит больше полезной информации,
чем "[object Object]". Вы также можете сделать это самостоятельно.

Rabbit.prototype.toString = function() {
  return `a ${this.type} rabbit`;
};

console.log(String(blackRabbit));
// → a black rabbit

Это простой пример мощной идеи. Если часть кода написана для работы с объектами, имеющими определенный интерфейс
- в данном случае метод toString, - то любой объект, который поддерживает указанный интерфейс, может быть вставлен
в этот код и он будет работать. Подобная методика называется полиморфизмом. Полиморфный код может работать со значениями
разных видов, если они поддерживают ожидаемый интерфейс.

Цикл for/of позволяет перебирать разные виды структур данных. Это еще один случай полиморфизма - такие циклы ожидают,
что структура данных предоставит определенный интерфейс, как у массивов и строк.